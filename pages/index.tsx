import type { NextPage } from "next";

import Head from "next/head";
import { Heading, Center, Stack, Box, Button, Flex, VStack, Text, HStack } from "@chakra-ui/react";
import { CheckIcon, WarningIcon } from "@chakra-ui/icons";
import { useState, useCallback } from "react";
import { useRouter } from "next/router";
import { useMutation } from "@tanstack/react-query";
import { useToast } from "@chakra-ui/react";

import { useNumericPadKeyboard } from "hooks/useNumericPadKeyboard";
import { useAuthUser } from "contexts/AuthContext";
import { LoginStep, LoginUserState, ResultStatus, ErrorResponse, Routes } from "types";
import { login } from "services/auth";
import Pad from "components/Pad/Pad";
import PadDetail from "components/PadDetail/PadDetail";
import { ButtonActions } from "types/pages";
import Loading from "components/UI/Loading";

import styles from "../styles/Home.module.css";

const BACKSPACE_KEY = "Backspace";
const maxLength = {
  Document: 8,
  Password: 4,
};

const Auth: NextPage = () => {
  const [selectedOption, setSelectedOption] = useState<LoginStep>(LoginStep.Document);
  const [padState, setPadState] = useState<string>("");

  const [error, setError] = useState<string | null>(null);
  const [loginData, setLoginData] = useState<LoginUserState>({
    password: null,
    document: null,
  });
  const router = useRouter();
  const toast = useToast();
  const auth = useAuthUser();

  const { mutate, isLoading } = useMutation(login, {
    onSuccess: (res) => {
      auth?.login(res.data);
      setError(null);
      setLoginData({ password: null, document: null });
      router.push(Routes.HOME);
    },
    onError: (error: ErrorResponse) => {
      if (error.status === ResultStatus.WRONG_CREDENTIALS) {
        setError("Your document or password is incorrect");

        return;
      }
      toast({
        title: "Something went wrong.",
        description: "It seems we are having some issues, please try later.",
        status: "error",
        duration: 9000,
        isClosable: true,
      });
      setError(null);
    },
  });

  const handleClickSelection = (state: LoginStep): void => {
    setPadState("");
    setSelectedOption(state);
    setError(null);
  };

  const onClickContinue = useCallback((): void => {
    if (selectedOption === LoginStep.Document) {
      setLoginData({ ...loginData, document: padState });
      setSelectedOption(LoginStep.Password);
      setPadState("");

      return;
    }
    if (selectedOption === LoginStep.Password) {
      const newValues = { ...loginData };

      newValues.password = padState;
      setSelectedOption(LoginStep.Password);
      mutate(newValues);
    }

    return;
  }, [loginData, mutate, padState, selectedOption]);

  const handlePadButtonClick = useCallback(
    (value: string): void => {
      if (value === ButtonActions.Delete || value === BACKSPACE_KEY) {
        setPadState((prevState) => prevState.slice(0, -1));

        return;
      }
      if (value === ButtonActions.Enter) {
        onClickContinue();

        return;
      }

      setPadState((prevState) =>
        prevState.concat(value).length <= maxLength[selectedOption]
          ? prevState.concat(value)
          : prevState,
      );
    },
    [selectedOption, onClickContinue],
  );

  const isEnterButtonDisabled = (): boolean => {
    if (selectedOption === LoginStep.Document) {
      return !(padState.length > 6 && padState.length <= 8);
    }

    if (selectedOption === LoginStep.Password) {
      return !(padState.length === 4);
    }

    return true;
  };

  useNumericPadKeyboard(handlePadButtonClick);
  if (isLoading) return <Loading />;

  return (
    <div className={styles.container}>
      <Head>
        <title>Next Banking</title>
        <meta content="Generated by create next app" name="description" />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main>
        <Center>
          <Heading as="h1" mb={["0", "6"]} mt={6} textAlign="center">
            Welcome to Next Banking
          </Heading>
        </Center>
        <Box mt={[4, 8]}>
          <Stack direction={["column", "row"]} h={200} mt={2} spacing={8}>
            <Flex align="center" direction="column" h={200} justify="center" w={["100%", "50%"]}>
              <Button
                colorScheme="gray"
                mb="4"
                rightIcon={selectedOption === LoginStep.Password ? <CheckIcon /> : undefined}
                w={["80%", "20%"]}
                onClick={() => handleClickSelection(LoginStep.Document)}
              >
                Document
              </Button>
              <Button
                colorScheme="gray"
                disabled={selectedOption === LoginStep.Document}
                mb={[0, 4]}
                w={["80%", "20%"]}
                onClick={() => handleClickSelection(LoginStep.Password)}
              >
                Password
              </Button>
            </Flex>
            <VStack p={[0, 4]} w={["100%", "50%"]}>
              <Box>
                <Center mb={[2, 5]} mt={[0, 5]}>
                  <Text fontWeight="bold">Please write your {selectedOption}</Text>
                </Center>
                <Pad
                  enterButtonDisabled={isEnterButtonDisabled()}
                  onClickPadButton={handlePadButtonClick}
                />
                <Box mt={[2, 5]} pb={[12, 0]}>
                  <PadDetail
                    content={padState}
                    maskContent={selectedOption === LoginStep.Password}
                  />
                </Box>
                {error && (
                  <HStack alignItems="center" mt={6} position="absolute">
                    <WarningIcon color="whiteAlpha.900" />
                    <Text color="whiteAlpha.900">{error}</Text>
                  </HStack>
                )}
              </Box>
            </VStack>
          </Stack>
        </Box>
      </main>
    </div>
  );
};

export default Auth;
